module module_mini_cpu(
	input S1, clk,
	output reg [3:0] P
);

	parameter INIT = 0, BLOCK = 1, WAIT_PRESS = 2, WAIT_UNPRESS = 3, WAIT_TIMER = 4, INCREMENT = 5;

	reg [2:0] state = INIT;

	reg [31:0] counter = 0;

	always @(posedge clk) begin
		if (counter < 250000001)
			counter <= counter + 1;
		else
			counter <= 0;
	end

	always @(posedge clk) begin
		case (state)
			INIT: begin state <= (S1)? WAIT_PRESS : BLOCK; end
			BLOCK: begin state <= (counter == 250000000)? INIT : (S1)? WAIT_PRESS : state; end
			WAIT_PRESS: begin state <= (counter == 250000000)? INIT : (~S1)? WAIT_UNPRESS : state; end
			WAIT_UNPRESS: begin state <= (counter == 250000000)? INIT : (S1)? WAIT_TIMER : state; end
			WAIT_TIMER: begin state <= (counter == 250000000)? INCREMENT : state; end
			INCREMENT: state <= INIT;
		endcase
	end

	always @(posedge clk) begin
		if (state == INCREMENT)
			P <= P + 1;
	end

endmodule